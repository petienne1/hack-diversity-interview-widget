{"ast":null,"code":"import { clone } from 'ramda';\nimport MessageActionTypes from './actionTypes';\nvar defaultState = {\n  /* map of conversationId -> list of messages */\n  byConversationId: {}\n};\n\nvar handleSendMessageSuccess = function handleSendMessageSuccess(state, action) {\n  var message = action.payload.messageFromServer;\n  var conversationMessages = state.byConversationId[message.conversationId]; // check if the list of message for the conversation\n  // exists before trying to append to it\n\n  if (!conversationMessages) {\n    state.byConversationId[message.conversationId] = [message];\n  } else {\n    state.byConversationId[message.conversationId] = [conversationMessages].unshift(message);\n  }\n\n  return state;\n};\n\nvar messageReducer = function messageReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var newState = clone(state);\n\n  switch (action.type) {\n    case MessageActionTypes.SendMessageFailed:\n      console.error(\"TODO: message sending errored with this error:\");\n      console.error(action.payload.error);\n      return newState;\n\n    case MessageActionTypes.SendMessageSuccess:\n      return handleSendMessageSuccess(newState, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default messageReducer;","map":{"version":3,"sources":["/Users/pierry/Desktop/Web Development/hack-diversity-interview-widget/src/modules/message/reducer.js"],"names":["clone","MessageActionTypes","defaultState","byConversationId","handleSendMessageSuccess","state","action","message","payload","messageFromServer","conversationMessages","conversationId","unshift","messageReducer","newState","type","SendMessageFailed","console","error","SendMessageSuccess"],"mappings":"AAAA,SAASA,KAAT,QAAsB,OAAtB;AAEA,OAAOC,kBAAP,MAA+B,eAA/B;AAEA,IAAMC,YAAY,GAAG;AACnB;AACAC,EAAAA,gBAAgB,EAAE;AAFC,CAArB;;AAKA,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACC,KAAD,EAAQC,MAAR,EAAmB;AAClD,MAAMC,OAAO,GAAGD,MAAM,CAACE,OAAP,CAAeC,iBAA/B;AACA,MAAMC,oBAAoB,GAAGL,KAAK,CAACF,gBAAN,CAAuBI,OAAO,CAACI,cAA/B,CAA7B,CAFkD,CAIlD;AACA;;AACA,MAAI,CAACD,oBAAL,EAA2B;AACzBL,IAAAA,KAAK,CAACF,gBAAN,CAAuBI,OAAO,CAACI,cAA/B,IAAiD,CAACJ,OAAD,CAAjD;AACD,GAFD,MAEO;AACLF,IAAAA,KAAK,CAACF,gBAAN,CAAuBI,OAAO,CAACI,cAA/B,IAAiD,CAACD,oBAAD,EAAuBE,OAAvB,CAA+BL,OAA/B,CAAjD;AACD;;AACD,SAAOF,KAAP;AACD,CAZD;;AAcA,IAAMQ,cAAc,GAAG,SAAjBA,cAAiB,GAAkC;AAAA,MAAjCR,KAAiC,uEAAzBH,YAAyB;AAAA,MAAXI,MAAW;AACvD,MAAMQ,QAAQ,GAAGd,KAAK,CAACK,KAAD,CAAtB;;AACA,UAAOC,MAAM,CAACS,IAAd;AACE,SAAKd,kBAAkB,CAACe,iBAAxB;AACEC,MAAAA,OAAO,CAACC,KAAR,CAAc,gDAAd;AACAD,MAAAA,OAAO,CAACC,KAAR,CAAcZ,MAAM,CAACE,OAAP,CAAeU,KAA7B;AACA,aAAOJ,QAAP;;AACF,SAAKb,kBAAkB,CAACkB,kBAAxB;AACE,aAAOf,wBAAwB,CAACU,QAAD,EAAWR,MAAX,CAA/B;;AACF;AACE,aAAOD,KAAP;AARJ;AAUD,CAZD;;AAcA,eAAeQ,cAAf","sourcesContent":["import { clone } from 'ramda';\n\nimport MessageActionTypes from './actionTypes';\n\nconst defaultState = {\n  /* map of conversationId -> list of messages */\n  byConversationId: {},\n};\n\nconst handleSendMessageSuccess = (state, action) => {\n  const message = action.payload.messageFromServer;\n  const conversationMessages = state.byConversationId[message.conversationId];\n\n  // check if the list of message for the conversation\n  // exists before trying to append to it\n  if (!conversationMessages) {\n    state.byConversationId[message.conversationId] = [message];\n  } else {\n    state.byConversationId[message.conversationId] = [conversationMessages].unshift(message);\n  }\n  return state;\n};\n\nconst messageReducer = (state = defaultState, action) => {\n  const newState = clone(state);\n  switch(action.type) {\n    case MessageActionTypes.SendMessageFailed:\n      console.error(\"TODO: message sending errored with this error:\");\n      console.error(action.payload.error);\n      return newState;\n    case MessageActionTypes.SendMessageSuccess:\n      return handleSendMessageSuccess(newState, action);\n    default:\n      return state;\n  }\n};\n\nexport default messageReducer;\n"]},"metadata":{},"sourceType":"module"}